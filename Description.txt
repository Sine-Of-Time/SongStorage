The following will be a write-up of the code for my personal use, I will document the parts of the code I find most important to review before interviews etc
To start off with, the code follows the structure of using an BST_Song binary search tree, BST_SongTile, and Heap to allow for operations to be preformed by title,ID, or duration and improving performance to O(log(n)) for Both BST object insertion, search and removal. Along with push, pop, and remove for the heap being O(log(n))  as required by our professor  
It can be noted, we also do not remove songs, rather just marked them as removed as the same song is often referenced in multiple trees and if we just deleted it we would end up with multiple null pointers 

1.Song Class
The main idea of this class was to encapsulate all of the data and behavior for a single song with variables such as songID(int), songTitle(Str), songDuration(int), and removed(bool), where removed denotes that an song has been removed in BST_song.
The most important operator is << which is overloaded to print song info

2.BST_Song(Binary Search Tree for Song ID),
One of two binary trees for dealing with Song objects, 
this specifically deals with songID, using it for all operations, and as stated has O(log(n)) for most operation runtimes. 
It has an Song data ptr, root ptr and NodeBST ptr for the right and left node. 
insert(Song &value) creates a new node song based on the parameter and the places it into the BST.
It finds the desired location by comparing the new value to root and going to the left using left ptr if the new ID is smaller and going right if the new ID is larger 

remove(song &value) searches for the node whose songID matches the value.getSongID(), does this removal with standard BST logic, in that if removing leaf node, remove directly, 
if removing node with one child, replace the node with its non-null child. 
If the removing node has two children, find the smallest node in the right subtree and replace it wit the current node 

search(song &value) transverse the tree by comparing the SongID, 
if smaller go left, if larger go right, if it finds the node, return true

printInOrder(NodeBST *node) recursively prints the tree from left subtree -> node -> right subtree, will skip songs marked as removed

...

3.BST_songTitle is an BST specialized for storing and managing multiple songs by their title and uses the song title for all operations, the insert,remove,search and printInOrder methods are all the same as BST_Song when accounting for this. There are some helper method from Jackson, denoted Jackson helper mess, which I have no idea what they do lol

4.Heap(Max-Heap by Song Duration) which uses an vector-based max heap to store pointers to Songs. 
The song with the largest duration is at the top of the heap and duration is the song used to organize the heap. Making the key the song duration. 

Push(Song *value) appends the new song pointer to the end of the heap and then used PercolateUp function to bubble up the new song ptr to its correct location

Pop() removes and returns the root then replaces the root with the last element in the heap. 
Then it calls PercolateDown to push down this new root so the largest element is the root

Remove(int index) is used to remove the song at the index in the vector, this is done by swapping the target element with the last and then popping it back. 
Then using PercolateDowm/PercolateUp depending on if the swapped value is larger or smaller

Peek() returns but does not remove the top element 

PercolateUp(int index) repeatedly compares the item at index with its parent until either the child duration is greater then parent and they swap or no child is larger or we reach the bottom 

PercolateDown(int index) Compares the node at index with its children. Swaps it with the larger child if the child is bigger (max-heap property). Repeats until no child is larger or we reach the bottom.

Interaction with Song Class:
It can be noted that each song as an idx and songDuration, both being integers. When we call Push(&song) in the heap, songDuration, more specfically song.getSongDuration() is used to find the correction for the song in the heap. If songDuration changes, the Manager or BST_songTitle code calls percolateUp/percolateDown to reheapify, using the idx to find where to song should sit.

Why did we decide on a heap? Mainly because of the favorite feature which immediately picks the top song. In addition, the heap yields pop/push of O(log(n)), and the heap allows direct removal at O(log(n)) time if the index is known, as in compliance with our project parameters

5.Manager class, which was created mainly to facilitate the interactions between the two BST's(ID and title) and the max-heap(duration)
More specifically, it act's as an interface through which external code or user cmd's interact with the underlying data structure. 
Doing so in the following functions, which often favor the BST_SongTree variable which holds songs but makes sure to reflect changes in the two BST when needed.

addSong(Song &Value) operates by inserting new song into BST_song named songTree(indexed by songID), BST_songTitle named songTitleTree(indexed by songTitle) and max-heap named songTime(Indexed by songDuration). It passes the pointer instead of the actual object to save space and ensure changes in the data object are reflected in the entire tree. This yields avg big-o of O(logn)

listen(string &title, int seconds) which runs at average time of O(log(n)) which since we are being passed the title, looks up Song via BST_songTitle to gain the most efficient look-up time, if found it increments songDuration like such (songDuration += seconds), 
then it call's percolate up on the heap to ensure correct re-heapification as one song's duration has been increased. In essence this function allows for the increase of time listened on a specific song and lays the groundwork for the favorite function.

favorite() which runs at O(log(n)) average big O, it acts by popping from the heap the song with the most time listened to, as in it 
pops the song with the longest song duration and marks it as favorited by calling song->setIsFavorite(true). Using an pointer as all song's in any tree's are references

remove(string &title) which runs at O(log(n)) avg runtime which finds the song via BST_songTitle since the pasted parameter is the 
song title, if the soung is found to exist in BST_songTitle, the song ID is set to -1 and the removed variable is set to true. Then it calls the remove function in the heap using the index to find it and also physically removes the song node from the BST_songTitle, meaning the song only remains in the BST_Song.

Overall, the key takeaway, is to meet improved runtime standards and other class project parameters, we implemented three data structures, all of which shared pointers to the same song. With BST_SongTitle used for listen() and remove() operations, heap used for favorite, and BST_Song used in most of the main operations. Often in a supporting function or to ensure record is kept of favorited songs. 

